// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// ChannelMember defines model for ChannelMember.
type ChannelMember struct {
	Id *string `json:"id,omitempty"`
}

// AfterParam defines model for afterParam.
type AfterParam string

// ChannelSlugPathParam defines model for channelSlugPathParam.
type ChannelSlugPathParam string

// LimitParam defines model for limitParam.
type LimitParam int

// GetMembersParams defines parameters for GetMembers.
type GetMembersParams struct {

	// Specific Discord snowflake(s) to retrieve - omit to get all members.
	Snowflakes *[]string `json:"snowflakes,omitempty"`

	// Maximum page size.
	Limit *LimitParam `json:"limit,omitempty"`

	// Pagination cursor. Put the `next` string here if it's present in order to fetch the next page of the response.
	After *AfterParam `json:"after,omitempty"`
}

// CheckMembershipJSONBody defines parameters for CheckMembership.
type CheckMembershipJSONBody struct {

	// Discord snowflake ID
	Snowflake string `json:"snowflake"`
}

// CheckMembershipRequestBody defines body for CheckMembership for application/json ContentType.
type CheckMembershipJSONRequestBody CheckMembershipJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMembers request
	GetMembers(ctx context.Context, channelSlug ChannelSlugPathParam, params *GetMembersParams) (*http.Response, error)

	// CheckMembership request  with any body
	CheckMembershipWithBody(ctx context.Context, channelSlug ChannelSlugPathParam, contentType string, body io.Reader) (*http.Response, error)

	CheckMembership(ctx context.Context, channelSlug ChannelSlugPathParam, body CheckMembershipJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetMembers(ctx context.Context, channelSlug ChannelSlugPathParam, params *GetMembersParams) (*http.Response, error) {
	req, err := NewGetMembersRequest(c.Server, channelSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CheckMembershipWithBody(ctx context.Context, channelSlug ChannelSlugPathParam, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCheckMembershipRequestWithBody(c.Server, channelSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CheckMembership(ctx context.Context, channelSlug ChannelSlugPathParam, body CheckMembershipJSONRequestBody) (*http.Response, error) {
	req, err := NewCheckMembershipRequest(c.Server, channelSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetMembersRequest generates requests for GetMembers
func NewGetMembersRequest(server string, channelSlug ChannelSlugPathParam, params *GetMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelSlug", channelSlug)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/channel/%s/members", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Snowflakes != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "snowflakes", *params.Snowflakes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "after", *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckMembershipRequest calls the generic CheckMembership builder with application/json body
func NewCheckMembershipRequest(server string, channelSlug ChannelSlugPathParam, body CheckMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckMembershipRequestWithBody(server, channelSlug, "application/json", bodyReader)
}

// NewCheckMembershipRequestWithBody generates requests for CheckMembership with any type of body
func NewCheckMembershipRequestWithBody(server string, channelSlug ChannelSlugPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelSlug", channelSlug)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/channel/%s/members/check", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMembers request
	GetMembersWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, params *GetMembersParams) (*GetMembersResponse, error)

	// CheckMembership request  with any body
	CheckMembershipWithBodyWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, contentType string, body io.Reader) (*CheckMembershipResponse, error)

	CheckMembershipWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, body CheckMembershipJSONRequestBody) (*CheckMembershipResponse, error)
}

type GetMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// Pagination cursor.
		Next *string `json:"next,omitempty"`

		// An array of verified Discord user snowflakes.
		Users *[]ChannelMember `json:"users,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// Discord user is a member
		Member bool `json:"member"`

		// Verification failure
		Reason *string `json:"reason,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CheckMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMembersWithResponse request returning *GetMembersResponse
func (c *ClientWithResponses) GetMembersWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, params *GetMembersParams) (*GetMembersResponse, error) {
	rsp, err := c.GetMembers(ctx, channelSlug, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMembersResponse(rsp)
}

// CheckMembershipWithBodyWithResponse request with arbitrary body returning *CheckMembershipResponse
func (c *ClientWithResponses) CheckMembershipWithBodyWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, contentType string, body io.Reader) (*CheckMembershipResponse, error) {
	rsp, err := c.CheckMembershipWithBody(ctx, channelSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckMembershipResponse(rsp)
}

func (c *ClientWithResponses) CheckMembershipWithResponse(ctx context.Context, channelSlug ChannelSlugPathParam, body CheckMembershipJSONRequestBody) (*CheckMembershipResponse, error) {
	rsp, err := c.CheckMembership(ctx, channelSlug, body)
	if err != nil {
		return nil, err
	}
	return ParseCheckMembershipResponse(rsp)
}

// ParseGetMembersResponse parses an HTTP response from a GetMembersWithResponse call
func ParseGetMembersResponse(rsp *http.Response) (*GetMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// Pagination cursor.
			Next *string `json:"next,omitempty"`

			// An array of verified Discord user snowflakes.
			Users *[]ChannelMember `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckMembershipResponse parses an HTTP response from a CheckMembershipWithResponse call
func ParseCheckMembershipResponse(rsp *http.Response) (*CheckMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CheckMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// Discord user is a member
			Member bool `json:"member"`

			// Verification failure
			Reason *string `json:"reason,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

